name: Deploy Kubernetes - Produ√ß√£o

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

jobs:
  check-infrastructure:
    name: Verificar Infraestrutura Existente
    runs-on: ubuntu-latest
    outputs:
      cluster_exists: ${{ steps.check.outputs.cluster_exists }}
      cluster_name: ${{ steps.check.outputs.cluster_name }}
      cluster_location: ${{ steps.check.outputs.cluster_location }}

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Autenticar no Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_STG }}

      - name: Configurar Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: infraestrutura-devops-stg

      - name: Verificar se cluster existe
        id: check
        run: |
          # Verificar se o cluster existe
          if gcloud container clusters describe k8s-cluster-prod --location=southamerica-east1 --project=infraestrutura-devops-stg >/dev/null 2>&1; then
            echo "cluster_exists=true" >> $GITHUB_OUTPUT
            echo "cluster_name=k8s-cluster-prod" >> $GITHUB_OUTPUT
            echo "cluster_location=southamerica-east1" >> $GITHUB_OUTPUT
            echo "‚úÖ Cluster k8s-cluster-prod j√° existe"
          else
            echo "cluster_exists=false" >> $GITHUB_OUTPUT
            echo "cluster_name=" >> $GITHUB_OUTPUT
            echo "cluster_location=" >> $GITHUB_OUTPUT
            echo "‚ùå Cluster k8s-cluster-prod n√£o existe"
          fi

  terraform-infra:
    name: Provisionar Infraestrutura K8s
    runs-on: ubuntu-latest
    needs: check-infrastructure
    if: needs.check-infrastructure.outputs.cluster_exists == 'false'
    env:
      GCP_USER: ${{ secrets.GCP_USER }}
      SSH_KEY_PUB: ${{ secrets.SSH_KEY_PUB }}
    outputs:
      cluster_name: ${{ steps.terraform.outputs.cluster_name }}
      cluster_location: ${{ steps.terraform.outputs.cluster_location }}

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.4
          terraform_wrapper: false

      - name: Autenticar no Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_STG }}

      - name: Executar Terraform
        id: terraform
        working-directory: terraform/application
        run: |
          terraform init -input=false
          terraform plan -input=false \
            -var="project=infraestrutura-devops-stg" \
            -var="gcp_user=$GCP_USER" \
            -var="ssh_key_pub=$SSH_KEY_PUB"
          terraform apply -auto-approve -input=false \
            -var="project=infraestrutura-devops-stg" \
            -var="gcp_user=$GCP_USER" \
            -var="ssh_key_pub=$SSH_KEY_PUB"
          
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "cluster_location=$(terraform output -raw cluster_location)" >> $GITHUB_OUTPUT

  deploy-k8s:
    name: Deploy Aplica√ß√£o no Kubernetes
    runs-on: ubuntu-latest
    needs: [check-infrastructure, terraform-infra]
    if: always() && (needs.check-infrastructure.result == 'success')

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Autenticar no Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_STG }}

      - name: Configurar Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: infraestrutura-devops-stg

      - name: Instalar gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Definir vari√°veis do cluster
        id: cluster-vars
        run: |
          if [ "${{ needs.check-infrastructure.outputs.cluster_exists }}" == "true" ]; then
            echo "CLUSTER_NAME=${{ needs.check-infrastructure.outputs.cluster_name }}" >> $GITHUB_ENV
            echo "CLUSTER_LOCATION=${{ needs.check-infrastructure.outputs.cluster_location }}" >> $GITHUB_ENV
          else
            echo "CLUSTER_NAME=${{ needs.terraform-infra.outputs.cluster_name }}" >> $GITHUB_ENV
            echo "CLUSTER_LOCATION=${{ needs.terraform-infra.outputs.cluster_location }}" >> $GITHUB_ENV
          fi

      - name: Configurar kubectl
        run: |
          gcloud container clusters get-credentials $CLUSTER_NAME \
            --location $CLUSTER_LOCATION \
            --project infraestrutura-devops-stg

      - name: Instalar Ansible e depend√™ncias
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install ansible kubernetes google-auth google-cloud-container

      - name: Instalar Ansible Kubernetes Collection
        working-directory: ansible
        run: ansible-galaxy collection install kubernetes.core

      - name: Executar Ansible Deploy
        working-directory: ansible
        run: |
          ansible-playbook -i k8s-inventory.ini deploy-k8s.yml \
            -e cluster_name=$CLUSTER_NAME \
            -e cluster_location=$CLUSTER_LOCATION \
            -e docker_user=${{ secrets.DOCKER_USERNAME }}

      - name: Verificar status do deploy
        run: |
          echo "üîç Verificando status dos pods..."
          kubectl get pods -n estacionamento
          
          echo "üîç Verificando servi√ßos..."
          kubectl get services -n estacionamento
          
          echo "‚è≥ Aguardando pods ficarem prontos..."
          kubectl wait --for=condition=ready pod -l app=frontend -n estacionamento --timeout=300s || true
          kubectl wait --for=condition=ready pod -l app=backend -n estacionamento --timeout=300s || true
          kubectl wait --for=condition=ready pod -l app=postgres -n estacionamento --timeout=300s || true
          
          echo "üåê Verificando LoadBalancer..."
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get service frontend-service -n estacionamento -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [ ! -z "$EXTERNAL_IP" ] && [ "$EXTERNAL_IP" != "null" ]; then
              echo "üöÄ Aplica√ß√£o dispon√≠vel em: http://$EXTERNAL_IP"
              break
            else
              echo "‚è≥ Aguardando LoadBalancer ser provisionado... (tentativa $i/30)"
              sleep 10
            fi
          done
          
          if [ -z "$EXTERNAL_IP" ] || [ "$EXTERNAL_IP" == "null" ]; then
            echo "‚ö†Ô∏è  LoadBalancer ainda sendo provisionado."
            echo "Execute o comando para verificar: kubectl get service frontend-service -n estacionamento"
          fi

      - name: Status final do deploy
        run: |
          echo "üìä Status final dos recursos:"
          echo "================================"
          kubectl get all -n estacionamento
          echo "================================"
          kubectl get all -n monitoring
          echo "================================"
          echo "‚úÖ Deploy conclu√≠do!"
